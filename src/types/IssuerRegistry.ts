/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IssuerRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCurrentIssuerId"
      | "getIssuerData"
      | "getIssuerOwner"
      | "nextTokenId"
      | "registerIssuer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "IssuerRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "getCurrentIssuerId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerIssuer",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentIssuerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIssuer",
    data: BytesLike
  ): Result;
}

export namespace IssuerRegisteredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    data: string
  ];
  export type OutputTuple = [tokenId: bigint, owner: string, data: string];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IssuerRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IssuerRegistry;
  waitForDeployment(): Promise<this>;

  interface: IssuerRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCurrentIssuerId: TypedContractMethod<[], [bigint], "view">;

  getIssuerData: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getIssuerOwner: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  registerIssuer: TypedContractMethod<[data: string], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCurrentIssuerId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIssuerData"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getIssuerOwner"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerIssuer"
  ): TypedContractMethod<[data: string], [bigint], "nonpayable">;

  getEvent(
    key: "IssuerRegistered"
  ): TypedContractEvent<
    IssuerRegisteredEvent.InputTuple,
    IssuerRegisteredEvent.OutputTuple,
    IssuerRegisteredEvent.OutputObject
  >;

  filters: {
    "IssuerRegistered(uint256,address,string)": TypedContractEvent<
      IssuerRegisteredEvent.InputTuple,
      IssuerRegisteredEvent.OutputTuple,
      IssuerRegisteredEvent.OutputObject
    >;
    IssuerRegistered: TypedContractEvent<
      IssuerRegisteredEvent.InputTuple,
      IssuerRegisteredEvent.OutputTuple,
      IssuerRegisteredEvent.OutputObject
    >;
  };
}
